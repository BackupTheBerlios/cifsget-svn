#!/usr/bin/env python
import sys

type = dict()
	
for l in sys.stdin.readlines():
	if not l: continue
	
	if l[0] == '#':
		print l[1:],
		continue
	
	x = l.split()
	if not x: continue
	
	elif x[0] == 'type':
		t=x[1].upper()
		type[t]=int(x[2])
	elif x[0] == 'struct':
		struct = x[1].upper()
		offset = 0
		offset_nc = ''
		fields = []
	elif x[0] == 'end':
		print '#define', 'LEN_' + struct+'(base)', offset, offset_nc
		print '#define', 'ITR_' + struct + '(base, macro)\\'
		print 'do {\\'
		for f, t in fields:
			print 'macro(%s, %s, GET_%s_%s(base), LEN_%s_%s(base));\\'%(f.lower(), t, struct, f, struct, f)
		print '} while(0)'
		print
		struct = None
	else:
		f = x[1].upper()
		t = x[0].upper()
		fields.append((f, t))
		n = struct+'_'+f

		print '#define', 'OFF_'+n+'(base)', `offset`+offset_nc
		print '#define', 'PTR_'+n+'(base)', '(base + OFF_'+n+'(base))'
		
		if t == 'BLOB':
			offset_nc = offset_nc + ' + LEN_'+n+'(base)'
			print '#define', 'GET_'+n+'(base)', '(base + OFF_'+n+'(base))'
			print '#define', 'END_'+n+'(base, end)', 'SETLEN_'+n+'(base, end - GET_' + n + '(base))'
		else:
			len = type[t]
			print '#define', 'LEN_'+n+'(base)', len
			print '#define', 'GET_'+n+'(base)', 'GET_'+t+'(base, OFF_'+n+'(base))'
			print '#define', 'SET_'+n+'(base, val)', 'SET_'+t+'(base, OFF_'+n+'(base), val)'
			offset += len

